import { Repository, ProgrammingLanguage, LanguageAtPath, ProjectComponent } from './model';
import { Git } from './services/git/Git';
import { ScanningStrategy } from './detectors/ScanningStrategyDetector';
import { ScannerContext } from './contexts/scanner/ScannerContext';
import { LanguageContext } from './contexts/language/LanguageContext';
import { IProjectComponentDetector } from './detectors/IProjectComponentDetector';
import { PracticeContext } from './contexts/practice/PracticeContext';
import { ProjectComponentContext } from './contexts/projectComponent/ProjectComponentContext';
import { RepositoryConfig } from './scanner/RepositoryConfig';
import { DiscoveryContext } from './contexts/discovery/DiscoveryContext';
export declare const Types: {
    ILanguageDetector: symbol;
    IProjectComponentDetector: symbol;
    ProjectComponentDetectorFactory: symbol;
    ScannerContextFactory: symbol;
    LanguageContextFactory: symbol;
    ProjectComponentContextFactory: symbol;
    ScanningStrategyDetector: symbol;
    PracticeContextFactory: symbol;
    DiscoveryContextFactory: symbol;
    RepositoryConfig: symbol;
    ScanningStrategy: symbol;
    FileInspectorBasePath: symbol;
    IGitInspector: symbol;
    ICollaborationInspector: symbol;
    IIssueTrackingInspector: symbol;
    IContentRepositoryBrowser: symbol;
    IFileInspector: symbol;
    IRootFileInspector: symbol;
    IProjectFilesBrowser: symbol;
    RepositoryPath: symbol;
    LanguageAtPath: symbol;
    InitiableInspector: symbol;
    IPackageInspector: symbol;
    ProjectComponent: symbol;
    GitFactory: symbol;
    PracticeCheckerFactory: symbol;
    GitCache: symbol;
    IOutput: symbol;
    ArgumentsProvider: symbol;
    Practice: symbol;
    IReporter: symbol;
    ConfigProvider: symbol;
    JSONReporter: symbol;
};
export declare type GitFactory = (repository: Repository) => Git;
export declare type ScannerContextFactory = (scanningStrategy: ScanningStrategy) => ScannerContext;
export declare type LanguageContextFactory = (languageAtPath: LanguageAtPath) => LanguageContext;
export declare type ProjectComponentContextFactory = (component: ProjectComponent) => ProjectComponentContext;
export declare type ProjectComponentDetectorFactory = (language: ProgrammingLanguage) => IProjectComponentDetector[];
export declare type PracticeContextFactory = (projectComponent: ProjectComponent) => PracticeContext;
export declare type DiscoveryContextFactory = (repositoryConfig: RepositoryConfig) => DiscoveryContext;
//# sourceMappingURL=types.d.ts.map